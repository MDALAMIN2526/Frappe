import webnotes

class ModuleFile:
	"""
		Module file class.
		
		Module files can be dynamically generated by specifying first line is "#!python"
		the output
	"""
	def __init__(self, path):
		self.path = path
		
	def is_new(self):
		"""
			Returns true if file does not match with last updated timestamp
		"""
		import webnotes.utils
		self.timestamp = webnotes.utils.get_file_timestamp(self.path)
		if self.timestamp != self.get_db_timestamp():
			return True
		
	def get_db_timestamp(self):
		"""
			Returns the timestamp of the file
		"""
		try:
			ts = webnotes.conn.sql("select tstamp from __file_timestamp where file_name=%s", self.path)
			if ts:
				return ts[0][0]
		except Exception, e:
			if e.args[0]==1146:
				# create the table
				webnotes.conn.commit()
				webnotes.conn.sql("""
					create table __file_timestamp (
						file_name varchar(180) primary key, 
						tstamp varchar(40)) engine=InnoDB""")
				webnotes.conn.begin()
			else:
				raise e
						
	def update(self):
		"""
			Update the timestamp into the database
			(must be called after is_new)
		"""
		webnotes.conn.sql("""
			insert into __file_timestamp(file_name, tstamp) 
			values (%s, %s) on duplicate key update tstamp=%s""", (self.path, self.timestamp, self.timestamp))

	def load_content(self):
		"""
			returns file contents
		"""
		try:
			f = open(self.path,'r')
			self.content = f.read()
			f.close()
		except IOError, e:
			if e.args[0]==2:
				self.content = ''
			else:
				raise e

		return self.content
		
	def read(self, do_execute = None):
		"""
			Return the file content, if dynamic, execute it
		"""
		self.load_content()
		if do_execute and self.content.startswith('#!python'):
			from webnotes.model.code import execute
			self.content = execute(self.content)
			
		return self.content

		
