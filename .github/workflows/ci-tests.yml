name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
       include:
        - DB: "mariadb"
          TYPE: "server"
        - DB: "postgres"
          TYPE: "server"
        - DB: "mariadb"
          TYPE: "ui"

    services:
      mysql:
        image: mariadb:10.3
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: YES
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3

      postgres:
        image: postgres:9.5
        env:
          POSTGRES_PASSWORD: travis
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Clone
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Add to Hosts
        run: |
          echo "127.0.0.1 test_site" | sudo tee -a /etc/hosts
          echo "127.0.0.1 test_site_producer" | sudo tee -a /etc/hosts

      - name: Cache pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Cache cypress binary
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-cypress-
          restore-keys: |
            ${{ runner.os }}-cypress-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: bash ${GITHUB_WORKSPACE}/.github/helper/install_dependencies.sh

      - name: Install
        run: bash ${GITHUB_WORKSPACE}/.github/helper/install.sh
        env:
          DB: ${{ matrix.DB }}
          TYPE: ${{ matrix.TYPE }}

      - name: Run Tests
        run: bash ${GITHUB_WORKSPACE}/.github/helper/run_tests.sh
        env:
          DB: ${{ matrix.DB }}
          TYPE: ${{ matrix.TYPE }}

      # - name: Coverage
      #   run: |
      #     cd ~/frappe-bench/
      #     pip install coverage==4.5.4
      #     pip install python-coveralls
      #     coveralls -b ${GITHUB_WORKSPACE} -d sites/.coverage
      #   env:
      #     DB: ${{ matrix.DB }}
      #     COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
      #     COVERALLS_GIT_BRANCH: ${{ secrets.GITHUB_REF }}
      #     TYPE: ${{ matrix.TYPE }}
      - name: Publish to coveralls.io
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ github.token }}
          path-to-lcov: ~/frappe-bench/sites/.coverage
          base-path: ${GITHUB_WORKSPACE}