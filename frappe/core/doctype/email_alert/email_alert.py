# Copyright (c) 2013, Web Notes Technologies Pvt. Ltd. and Contributors
# For license information, please see license.txt

from __future__ import unicode_literals
import frappe
from frappe import _
from frappe.model.document import Document
from frappe.utils import validate_email_add

class EmailAlert(Document):
	def validate(self):
		if self.event=="Date Changed" and not self.date_changed:
			frappe.throw(_("Please specify which date field must be checked"))

		if self.event=="Value Changed" and not self.value_changed:
			frappe.throw(_("Please specify which value field must be checked"))

def trigger_daily_alerts():
	trigger_email_alerts(None, "Date Change")

def trigger_email_alerts(doc, method=None):
	if method=="Date Change":
		for alert in frappe.db.sql_list("""select name from `tabEmail Alert`
			where event='Date Change'"""):

			alert = frappe.get_doc("Email Alert", alert)
			for name in frappe.db.sql_list("""select name from `tab%s` where
				DATE(%s) = ADDDATE(CURDATE(), INTERVAL %s DAY)""" % \
				(alert.document_type, alert.date_changed, alert.days_in_advance or 0)):

				evaluate_alert(frappe.get_doc(alert.document_type, name),
					alert, "Date Change")
	else:
		if method in ("on_update", "validate") and doc.get("__in_insert"):
			# don't call email alerts multiple times for inserts
			# on insert only "New" type alert must be called
			return

		eevent = {
			"on_update": "Save",
			"after_insert": "New",
			"validate": "Value Change",
			"on_submit": "Submit",
			"on_cancel": "Cancel",
		}[method]

		for alert in frappe.db.sql_list("""select name from `tabEmail Alert`
			where document_type=%s and event=%s""", (doc.doctype, eevent)):
			evaluate_alert(doc, alert, eevent)

def evaluate_alert(doc, alert, event):
	if isinstance(alert, basestring):
		alert = frappe.get_doc("Email Alert", alert)
	if alert.condition:
		if not eval(alert.condition):
			return

	if event=="Value Change" and not doc.is_new():
		if doc.get(alert.value_changed) == frappe.db.get_value(doc.doctype,
			doc.name, alert.value_changed):
			return # value not changed

	for recipient in alert.email_alert_recipients:
		recipients = []
		if recipient.condition:
			if not eval(recipient.condition):
				continue
		if recipient.email_by_document_field:
			if validate_email_add(doc.get(recipient.email_by_document_field)):
				recipients.append(doc.get(recipient.email_by_document_field))
			# else:
			# 	print "invalid email"
		if recipient.cc:
			recipient.cc = recipient.cc.replace(",", "\n")
			recipients = recipients + recipient.cc.split("\n")

	if not recipients:
		return

	template = alert.message + footer
	# send alert
	frappe.sendmail(recipients=recipients, subject=alert.subject,
		message= frappe.render_template(template, {"doc": doc, "alert":alert}),
		bulk=True, ref_doctype = doc.doctype, ref_docname = doc.name)


footer = """<div style='margin-top: 20px; font-size: 80%; color: #888'>
This Email Alert {{alert.name}} was autogenerated for
{{ doc.doctype }} <a href="/desk#Form/{{doc.doctype}}/{{doc.name}}">{{doc.name}}</a>.
To update, modify it, go to Setup > Email > <a href="/desk#List/Email Alert">Email Alert</a>
"""
